#!/bin/bash

function help() {
  echo "usage: $0 [--app app_name] [--server server_name] [--type type] [--repository git_url] [--help]"
  echo "Welcome to the server setup tool!"
  echo "  --help Display this help menu"
  echo "  --app app_name Specify the app name, otherwise the tool will be interactive."
  echo "  --server server_name Specify the sever name/host name that NGINX will use to server the application. eg. google.com"
  echo "  --type [d/G]] d or g for daphne or gunicorn respectively."
  echo "  --workers [num_workers] specify how many workers you want if using daphne"
  echo "  --repository [url] URL to the git repository that holds the project."
  echo "  --branch [branch_name] URL to the git repository that holds the project."
  echo "  --interactive [Y/n] run tool interactively or no."
  echo "       For interaction free tool running you must specify the --app --server --type [--workers if --type d] --repository --python flags"
  exit 0
}

function webapps_user() {
  echo "Checking if webapps user exists"
  ret=false
  getent passwd webapps >/dev/null 2>&1 && ret=true

  if $ret; then
      echo "Webapps user exists already..."
  else
      echo "Webapps user does not exist. Creating new user..."
      sudo useradd -m -d /webapps/ -s /bin/bash webapps
      sudo chown -R webapps:webapps /webapps
  fi
}

function update_server() {
  echo "Updating server packages and installing required server apps"
  sudo apt update
  sudo apt upgrade -y
  #sudo apt install -y nginx supervisor python3 python3-dev python3-venv git redis-server
  sudo apt install -y nginx supervisor python3 python3-dev python3-venv git
  #sudo systemctl enable redis-server
  #sudo systemctl start redis-server
}

function clone_repository() {
  echo "Cloning into ${APP_DIR}..."
  test -d ${APP_DIR} && sudo rm -r ${APP_DIR}

  if [[ -z ${BRANCH} ]]; then
    BRANCH="master"
  fi

sudo -i -u webapps bash << _GIT
git clone -b ${BRANCH} ${REPOSITORY_URL} ${APP_DIR} || exit 2
_GIT
}

function create_log_dir() {
  test -d ${LOG_DIR} && sudo rm -r ${LOG_DIR}
  echo "Creating log directory..."
  sudo mkdir ${LOG_DIR}
}

function create_venv() {
  echo "Creating virtual env..."
  test -d ${VENV_DIR} && sudo rm -r ${VENV_DIR}
  sudo python3 -m venv ${VENV_DIR} || exit 2

  sudo chown -R webapps:webapps ${VENV_DIR}
}

function install_requirements() {
  echo "Installing requirements..."

sudo -i -u webapps bash <<_PIP
source ${VENV_DIR}/bin/activate
pip install -U pip
pip install -U setuptools
pip install -r ${APP_DIR}/requirements.txt
_PIP
}

function check_app_type() {
  if [[ "${APP_TYPE,,}" == "g" ]] || [[ "${APP_TYPE,,}" == "gunicorn" ]]; then
    APP_TYPE="gunicorn"
  elif [[ "${APP_TYPE,,}" == "d" ]] || [[ "${APP_TYPE,,}" == "daphne" ]]; then
    APP_TYPE="daphne"
  else
    echo "Your APP_TYPE was not a valid app type."
    exit 2
  fi
}

function write_nginx() {
echo "Creating nginx files..."
sudo -i -u root bash <<_NGINX
cat > /etc/nginx/sites-available/${APP_NAME,,} <<_nginx
upstream ${APP_NAME,,} {
  server unix:${APP_DIR}/run/${APP_TYPE,,}.sock fail_timeout=0;
}
server {
  listen 80;
  listen [::]:80;
  server_name ${SERVER_NAME,,};

  client_body_in_file_only clean;
  client_body_buffer_size 32K;

  client_max_body_size 4G;

  sendfile on;
  send_timeout 900s;

  access_log ${LOG_DIR}/nginx-access.log;
  error_log  ${LOG_DIR}/nginx-error.log;

  location /static/ {
    alias ${APP_DIR}/static/;
  }

  location /media/ {
    alias ${APP_DIR}/media/;
  }

  location / {
    proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
    proxy_set_header Host \\\$http_host;
    proxy_redirect off;
    proxy_set_header Upgrade \\\$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_http_version 1.1;
    proxy_pass http://unix:${APP_DIR}/run/${APP_TYPE,,}.sock:/;
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root ${APP_DIR}/static/;
  }
}
_nginx

echo "Attempting to create symbolic link from sites-available to site-enabled..."
ln -s /etc/nginx/sites-available/${APP_NAME,,} /etc/nginx/sites-enabled/${APP_NAME,,}

echo "Creating supervisor run scripts..."
cat > /etc/supervisor/conf.d/${APP_TYPE,,}_${APP_NAME,,}.conf <<_supervisor
[program:${APP_NAME,,}]
command=${APP_DIR}/bin/${APP_TYPE,,}_start.sh
user=webapps
stdout_logfile=${LOG_DIR}/${APP_TYPE,,}_supervisor.log
redirect_stderr=true
environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8
_supervisor
_NGINX
}


function daphne_workers() {
  if [[ ${APP_TYPE,,} == "daphne" ]]; then
    for (( c=1; c<=${WORKER_NUM}; c++ ))
    do
      echo "Creating worker: w${c}"
sudo -i -u root bash <<_SVR
cat > /etc/supervisor/conf.d/${APP_NAME,,}_w${c}.conf <<_worker
[program:${APP_NAME,,}_w${c}]
command=${APP_DIR}/bin/worker_start.sh
user=webapps
stdout_logfile=${LOG_DIR}/w${c}.log
redirect_stderr=true
environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8
_worker
_SVR
    done
  fi
}

function get_worker_count() {
  if [[ ${APP_TYPE,,} == "daphne" ]]; then
    if [[ -z ${WORKER_NUM} ]]; then
      echo "How many workers do you want to create for ${APP_NAME}?"
      read WORKER_NUM
      case ${WORKER_NUM} in
        ''|*[!0-9]*)
          echo "You must enter a number!"
          exit 2
        ;;
        *)
        ;;
      esac
    fi
  fi
}

INTERACTIVE=true
if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
  help
fi
while [[ $# -gt 1 ]]
do
  key="$1"

  case $key in
    --app)
      APP_NAME="$2"
      shift
    ;;
    --server)
      SERVER_NAME="$2"
      shift
    ;;
    --type)
      APP_TYPE="$2"
      shift
    ;;
    --workers)
      WORKER_NUM="$2"
      shift
    ;;
    --repository)
      REPOSITORY_URL="$2"
      shift
    ;;
    --branch)
      BRANCH="$2"
      shift
    ;;
    --interactive)
      if [[ ${2,,} == "n" ]]; then
        INTERACTIVE=false
      fi
      shift
    ;;
    *)
    ;;
  esac
  shift # past argument or value
done

if [[ ${INTERACTIVE} == true ]]; then
  if [[ -z ${APP_NAME} ]]; then
    echo "What is the app name?"
    read APP_NAME
  fi

  if [[ -z "${APP_TYPE}" ]]; then
    echo "(g)unicorn or (d)aphne? [g/d]  (Hint: Type \"g\" or \"d\")"
    read APP_TYPE
  fi

  check_app_type
  get_worker_count

  if [[ -z ${SERVER_NAME} ]]; then
    echo "What is the server name for ${APP_NAME}? eg. jjk.io"
    read SERVER_NAME
  fi

  if [[ -z "${REPOSITORY_URL}" ]]; then
    echo "Please enter the repository URI: "
    read REPOSITORY_URL
  fi

else
  test -z ${APP_NAME} && exit 2
  test -z ${APP_TYPE} && exit 2
  check_app_type
  if [ ${APP_TYPE} == "daphne" ]; then
    test -z ${WORKER_NUM} && exit 2
  fi
  test -z ${SERVER_NAME} && exit 2
  test -z ${REPOSITORY_URL} && exit 2
fi

echo APP NAME         = "${APP_NAME}"
echo APP TYPE         = "${APP_TYPE}"
if [[ ${APP_TYPE,,} == "daphne" ]]; then
  echo DAPHNE WORKERS   = "${WORKER_NUM}"
fi
echo SERVER NAME      = "${SERVER_NAME}"
echo REPOSITORY URL   = "${REPOSITORY_URL}"

APP_DIR="/webapps/${APP_NAME,,}"
LOG_DIR="/var/log/${APP_NAME,,}"
VENV_DIR="/opt/${APP_NAME,,}"

echo APP_DIR          = "${APP_DIR}"
echo LOG_DIR          = "${LOG_DIR}"
echo VENV_DIR         = "${VENV_DIR}"

webapps_user
update_server
clone_repository
create_venv
create_log_dir
install_requirements
check_app_type
write_nginx
daphne_workers

echo "Done"
